#!/bin/bash

set -euo pipefail

#set -x

prog=$(basename "$0")

log() {
    echo "[ffmpeg-2pass-pipe]" "$@" >&2
}

input_file="pipe:0"
output_file="pipe:"

init_args=""
while [ $# -gt 1 ] ; do
    case "$1" in
        -hwaccel) init_args="${init_args:+$init_args }$1 $2"; shift 2 ;;
        -i) input_file="$2" ; shift 2 ;;
        -o) output_file="$2" ; shift 2 ;;
        --) shift 1 ; break ;;
        *) break ;;
    esac
done

extra_args=("$@")

prog_tmp_dir="${TMPDIR:-/tmp}/$prog.$$.tmp"
tmp_running_file="$prog_tmp_dir/running"

do_lockfile=false
do_shlock=false
if type -P lockfile-create > /dev/null ; then
    do_lockfile=true
elif type -P shlock > /dev/null ; then
    do_shlock=true
fi

cleanup() {
    set +u
    if $do_lockfile ; then
        lockfile-remove "$tmp_running_file" || true
    fi
    rm -Rf "$prog_tmp_dir"
    return 0
}
trap "cleanup" 0
trap "cleanup ; exit 255" 1 2 9 15

mkdir "$prog_tmp_dir"
tmp_input_file="$prog_tmp_dir/input"
tmp_pass1output_file="$prog_tmp_dir/pass1output"
tmp_pass1output_file="pipe:"
passlogfile_file="$prog_tmp_dir/passlogfile"

if $do_lockfile ; then
    lockfile-create --verbose --use-pid "$tmp_running_file" < /dev/null
    lockfile-touch "$tmp_running_file" &
    BADGER_PID="$!"
elif $do_shlock ; then
    BADGER_PID=
    if ! shlock -f "$tmp_running_file" -p $$ ; then
        echo "Failed to create $tmp_running_file" >&2
        exit 1
    fi
fi

log "PASS 1"
set -- ffmpeg $init_args -i "$input_file" \
    -pass 1 -passlogfile "$passlogfile_file" \
    -speed 4 \
    "${extra_args[@]}" \
    -- "$tmp_pass1output_file"
if [ "$input_file" = "pipe:0" ] ; then
    ( set -o pipefail ; tee --output-error=exit "$tmp_input_file" | "$@" ) > /dev/null
    input_file="$tmp_input_file"
else
    (set -x ; "$@" > /dev/null)
fi

log "PASS 2"
(set -x ; ffmpeg $init_args -i "$input_file" \
    -pass 2 -passlogfile "$passlogfile_file" \
    "${extra_args[@]}" \
    -- "$output_file" < /dev/null)

[[ -n "$BADGER_PID" ]] && kill $BADGER_PID
