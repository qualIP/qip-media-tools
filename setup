#!/bin/bash

set -euo pipefail

cd "$(dirname "$0")"

OPT_HELP=false
OPT_YES=false
OPT_USER=false
OPT_DEVELOP=false
OPT_INSTALL=true
OPT_REINSTALL=false
OPT_CLEAN=true
MAKE=${MAKE:-make -j}
PREFIX=${PREFIX:-/usr/local}
PYTHON=python3
PIP=pip3

TEMP=`POSIXLY_CORRECT=1 getopt --long dummy,help,yes,system,user,develop,prefix:,install,uninstall,reinstall,clean,no-clean --options hy --name "$0" -- --system "$@"`
eval set -- "$TEMP"

while true ; do
    case "$1" in

        --dummy) shift ;;
        -h|--help) OPT_HELP=true ; shift ;;
        -y|--yes)  OPT_YES=true ; shift ;;

        --install)   OPT_INSTALL=true                      ; shift ;;
        --uninstall) OPT_INSTALL=false                     ; shift ;;
        --reinstall) OPT_INSTALL=true  OPT_REINSTALL=true  ; shift ;;

        --system)  PREFIX=/usr/local ; OPT_USER=false ; shift 1 ;;
        --user)    PREFIX=~/.local   ; OPT_USER=true  ; shift 1 ;;
        --develop) PREFIX=~/.local   ; OPT_USER=true ; OPT_DEVELOP=true ; shift 1 ;;
        --prefix)  PREFIX=$2                          ; shift 2 ;;

        --clean)    OPT_CLEAN=true  ; shift ;;
        --no-clean) OPT_CLEAN=false ; shift ;;

        --) shift ; break ;;
        *) echo "Internal error!" >&2 ; exit 1 ;;

    esac
done
if [[ "$#" != 0 ]] ; then
    echo "Extraneous arguments: $*" >&2
    exit 1
fi

if $OPT_HELP ; then
    echo "Usage: $0 [options...]"
    echo "Options:"
    echo "  -h, --help          Print this help and exit"
    echo "  -y, --yes           Answer yes to all prompts (unattended)"
    echo
    echo "  --install           Install (default)"
    echo "  --reinstall         Reinstall even if already installed"
    echo "  --uninstall         Uninstall instead of installing"
    echo
    echo "  --user              Select user installation target (~/.local)"
    echo "  --system            Select system installation target (/usr/local)"
    echo "  --develop           Select development installation target (~/.local)"
    echo "  --prefix PREFIX     Specify custom installation prefix"
    echo
    echo "  --clean             Clean build artifacts after installing/uninstalling (default)"
    echo "  --no-clean          Do not clean build artifacts"
    exit 0
fi

if [[ -z "$PREFIX" ]] ; then
    echo "Please specify installation target (e.g.: --user, --system)" >&2
    exit 1
fi

if ! [[ -d "$PREFIX" ]] ; then
    $(PREFIX_SUDO) mkdir "$PREFIX"
fi

PREFIX_SUDO=$([[ -w "$PREFIX" ]] || echo sudo)
maybe_sudo=$([[ "$USER" = "root" ]] || echo sudo)
lsb_codename=$(lsb_release -cs 2>/dev/null)

print_h2() {
    echo
    echo
    echo "## $*"
    echo
}

test_prog_installed() {
    local prog=$1 ; shift
    local v

    echo -n "$prog installed? "
    v=$(which "$prog" 2> /dev/null || true)
    if [[ -n "$v" ]] ; then
        echo "Yes: $v"
    else
        echo "No"
        echo "Error: $prog not found!" >&2
        return 1
    fi
}

test_package_installed() {
    local package=$1 ; shift
    local v

    echo -n "$package package installed? "
    v=$(dpkg -s "$package" 2> /dev/null | sed -n -e 's/^Version: //p ; T ; q' || true)
    if [[ -n "$v" ]] ; then
        echo "Yes: $v"
    else
        echo "No"
        echo "Error: $package package not found!" >&2
        return 1
    fi
}

test_docker_image_installed() {
    local image=$1 ; shift
    local v=

    echo -n "Docker $image image installed? "
    v=$(docker image ls -q "$image")
    if [[ -n "$v" ]] ; then
        echo " Yes"
    else
        echo " No"
        echo "Error: docker $image not found!" >&2
        return 1
    fi
}

test_python_module_installed() {
    local module=$1 ; shift
    local v=

    echo -n "Python module $module installed? "
    # v=$($PYTHON -c "import importlib ; print(importlib.util.find_spec('${module}') is not None)" 2> /dev/null)
    v=$($PYTHON -c "import ${module} ; print(True)" 2> /dev/null)
    if [[ "$v" = "True" ]] ; then
        echo " Yes"
    else
        echo " No"
        echo "Error: Python module $module not found!" >&2
        return 1
    fi
}

_has_docker=
need_docker() {
    if [[ -z "$_has_docker" ]] ; then
        if test_prog_installed docker ; then
            _has_docker=true
        else
            _has_docker=false
            print_h2 "Docker"
            echo "Docker is a container framework that reduces complexity of porting"
            echo "applications. Several 3rd-party applications used by qualIP's Media Tools"
            echo "are made available in dockers."
            echo
            echo "See https://www.docker.com"
            echo

            case "$lsb_codename" in
                bullseye|buster)
                    echo "Following Docker install instructions for Debian $lsb_codename:"
                    echo "    https://docs.docker.com/engine/install/debian/"
                    echo
                    $maybe_sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
                    curl -fsSL https://download.docker.com/linux/debian/gpg \
                        | $maybe_sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" \
                        | $maybe_sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                    $maybe_sudo apt-get update
                    ;;

                hirsute|groovy|focal|bionic|xental)
                    echo "Following Docker install instructions for Ubuntu $lsb_codename:"
                    echo "    https://docs.docker.com/engine/install/ubuntu/"
                    echo
                    $maybe_sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
                        | $maybe_sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
                        | $maybe_sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                    $maybe_sudo apt-get update
                    ;;

                *)
                    echo "No special instructions known for release codename '$lsb_codename'"
                    echo
                    ;;
            esac

            install_package docker-ce

            if test_prog_installed docker ; then
                _has_docker=true
            else
                echo "docker installed by docker-ce is not found!" >&2
                exit 1
            fi
        fi
        if $_has_docker ; then
            if ! (set -x && docker info) ; then
                echo
                echo "You don't seem to be able to run docker commands."
                if groups | grep -qw docker ; then
                    : #echo "You are part of the docker group."
                else
                    echo
                    echo "You are not part of the docker group. You probably need to run the"
                    echo "following command to be added to the group:"
                    echo
                    echo "    sudo adduser $USER docker"
                    echo
                    echo "Once done, please start a new login session (or reboot) for the change to"
                    echo "be effective."
                    echo
                fi
                echo "Please fix the issue and run $0 again."
                exit 1
            fi
        fi
    fi
    $_has_docker
}

_has_docker_wine=
need_docker_wine() {
    if [[ -z "$_has_docker_wine" ]] ; then
        if $OPT_INSTALL ; then
            if test_docker_image_installed test/wine64 \
                    && test_docker_image_installed test/wine32 \
                ; then
                _has_docker_wine=true
            else
                _has_docker_wine=false
            fi
        else
            if test_docker_image_installed test/wine64 \
                    || test_docker_image_installed test/wine32 \
                ; then
                _has_docker_wine=true
            else
                _has_docker_wine=false
            fi
        fi
        if $OPT_INSTALL ; then
            if $OPT_REINSTALL || ! $_has_docker_wine ; then
                print_h2 "Wine"
                echo "Wine is a Windows compatibility layer for Linux which allows running some"
                echo "3rd-party Windows applications used by qualIP's Media Tools."
                echo "Dockers for wine32 and wine64 are used as standard base for these"
                echo "3rd-party Windows applications."
                echo
                echo "See https://www.docker.com"
                echo
                if ask_yes_no "Build and install wine dockers?" \
                        && need_docker \
                    ; then
                    (set -x && $MAKE -C docker/wine) || exit $?
                    (set -x && $MAKE -C docker/wine tag-latest) || exit $?
                    $OPT_CLEAN && (set -x && $MAKE -C docker/wine clean)
                    _has_docker_wine=true
                fi
            fi
        else
            if $_has_docker_wine \
                    && ask_yes_no "Uninstall wine dockers?" \
                ; then
                (set -x && $MAKE -C docker/wine PREFIX="$PREFIX" uninstall)
                $OPT_CLEAN && (set -x && $MAKE -C docker/wine clean)
                _has_docker_wine=false
            fi
        fi
    fi
    $_has_docker_wine
}

ask_yes_no() {
    local q=$1 ; shift
    local v=

    while true ; do
        echo -n "$q [Y/n] "
        if $OPT_YES ; then
            v=yes
            echo "$v"
        else
            read v
        fi
        case "x$v" in
            x|xY|xy|xyes) v=true ; break ;;
            xN|xn|xno) v=false ; break ;;
            *) echo "Invalid input! Please try again" ;;
        esac
    done
    $v
}

install_package() {
    local package=$1 ; shift
    local ask=true
    local v=
    while [[ "$#" != 0 ]] ; do
        case "$1" in
            -y) ask=false ;;
            *) echo "Invalid argument: $1" >&2 ; exit 1 ;;
        esac
    done

    set -- apt-get install $package
    [[ "$USER" = "root" ]] || set -- $maybe_sudo "$@"

    if ! $ask || ask_yes_no "Install $package package ($*)?" ; then
        (set -x && "$@") || exit 1
    else
        return 1
    fi
}


#print_h2 "Prologue"
echo
echo "This program will help you install qualIP's Media Tools and its"
echo "dependencies."
echo "Sudo access will be required to install certain tools."

print_h2 "System Information"
echo "Installation mode: $( \
    $OPT_REINSTALL && echo "Reinstall" || \
    ($OPT_INSTALL && echo "Install" || \
     echo "Uninstall"))"
echo "Installation target: $( \
    $OPT_DEVELOP && echo "Development" || \
    ($OPT_USER && echo "User" || \
     echo "System"))"
echo "Installation prefix: $PREFIX"
echo "Prompt mode: $($OPT_YES && echo "Answer yes" || echo "Prompt")"
echo "Clean mode: $($OPT_CLEAN && echo "Clean" || echo "No clean")"
echo "LSB release codename: $lsb_codename"

echo
echo "Run "'`'"$0 --help"'`'" for more options."

echo
ask_yes_no "Ready to proceed?"


print_h2 "Package dependencies"
echo "qualIP's Media Tools require several 3rd-party application packages"
echo "available in most Linux distributions."
echo "A small dependency-only package, \"qip-media-tools-depends\" is used to"
echo "make sure all required applications are installed."
echo
if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_package_installed qip-media-tools-depends ; then
        if ask_yes_no "Install qip-media-tools-depends package?" ; then
            (set -x && $MAKE -C src install-qip-media-tools-depends)
        fi
    fi
else
    if test_package_installed qip-media-tools-depends \
            && ask_yes_no "Uninstall qip-media-tools-depends package?" \
        ; then
        (set -x && $MAKE -C src uninstall-qip-media-tools-depends)
    fi
fi


print_h2 "PyAV (qualIP fork)"
echo "PyAV is a Pythonic binding for the FFmpeg libraries."
echo "The qualIP/PyAV fork has many enhancements required."
echo
#echo "See https://github.com/PyAV-Org/PyAV"
echo "See https://github.com/qualIP/PyAV"
echo

src_pyav_dir="$(pwd)/src/qip/PyAV"
if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_python_module_installed av ; then
        if ask_yes_no "Build and install Python module av (qualIP/PyAV)?" \
            ; then
            if ! [[ -d "$src_pyav_dir" ]] ; then
                (set -x && git clone "https://github.com/qualIP/PyAV.git" "$src_pyav_dir")
            fi
            (set -x ; cd "$src_pyav_dir" ; $PYTHON setup.py build)
            if $OPT_DEVELOP ; then
                (set -x ; cd "$src_pyav_dir" ; $PYTHON setup.py develop --user)
            elif $OPT_USER ; then
                (set -x ; cd "$src_pyav_dir" ; $PIP install . --user)
            else
                (set -x ; cd "$src_pyav_dir" ; $PREFIX_SUDO $PIP install . --system)
            fi
            test_python_module_installed av
        fi
    fi
else
    if (test_python_module_installed av \
        ) \
            && ask_yes_no "Uninstall Python module av (qualIP/PyAV)?" \
        ; then
        if $OPT_USER ; then
            (set -x ; $PIP uninstall --user "av")
        else
            (set -x ; $PREFIX_SUDO $PIP uninstall --system "av")
        fi
        $OPT_CLEAN && (set -x && $MAKE -C "$src_pyav_dir" clean)
    fi
fi

print_h2 "qaac"
echo "qaac is a CLI QuickTime AAC/ALAC encoder."
echo "It is required to encode audio files (music, audiobooks) in .m4a format"
echo "using Apple/iTunes's own AAC encoder resulting in widely compatible"
echo "high-quality compressed audio files."
echo
echo "See https://github.com/nu774/qaac"
echo

if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_prog_installed qaac ; then
        if ask_yes_no "Build and install qaac docker?" \
                && need_docker \
                && need_docker_wine \
            ; then
            (set -x && $MAKE -C docker/qaac)
            (set -x && $MAKE -C docker/qaac tag-latest)
            (set -x && $MAKE -C docker/qaac PREFIX="$PREFIX" install)
            $OPT_CLEAN && (set -x && $MAKE -C docker/qaac clean)
        fi
    fi
else
    if (test_prog_installed qaac \
            || test_docker_image_installed test/qaac \
        ) \
            && ask_yes_no "Uninstall qaac docker?" \
        ; then
        (set -x && $MAKE -C docker/qaac PREFIX="$PREFIX" uninstall)
        $OPT_CLEAN && (set -x && $MAKE -C docker/qaac clean)
    fi
fi


print_h2 "SubtitleEdit"
echo "Subtitle Edit is an editor for video subtitles"
echo "It is required to view subtitles and convert them between different"
echo "formats, including using character recognition (OCR) to convert video"
echo "subtitles, often found in DVD and Blu-ray movies, into text subtitles."
echo
echo "See https://nikse.dk/SubtitleEdit/"
echo

if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_prog_installed SubtitleEdit ; then
        if ask_yes_no "Build and install SubtitleEdit docker?" \
                && need_docker \
                && need_docker_wine \
            ; then
            (set -x && $MAKE -C docker/SubtitleEdit)
            (set -x && $MAKE -C docker/SubtitleEdit tag-latest)
            (set -x && $MAKE -C docker/SubtitleEdit PREFIX="$PREFIX" install)
            $OPT_CLEAN && (set -x && $MAKE -C docker/SubtitleEdit clean)
        fi
    fi
else
    if (test_prog_installed SubtitleEdit \
            || test_docker_image_installed test/subtitleedit \
        ) \
            && ask_yes_no "Uninstall SubtitleEdit docker?" \
        ; then
        (set -x && $MAKE -C docker/SubtitleEdit PREFIX="$PREFIX" uninstall)
        $OPT_CLEAN && (set -x && $MAKE -C docker/SubtitleEdit clean)
    fi
fi


print_h2 "FRIMDecode"
echo "FRIMDecode is a 3D-MVC Decoder."
echo "It is required to decode 3D movies that are encoded in Multiview Video"
echo "Coding format. For example, 3D Blu-ray movies."
echo
echo "See https://www.videohelp.com/software/FRIM"
echo

if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_prog_installed FRIMDecode ; then
        if ask_yes_no "Build and install FRIM docker?" \
                && need_docker \
                && need_docker_wine \
            ; then
            (set -x && $MAKE -C docker/frim)
            (set -x && $MAKE -C docker/frim tag-latest)
            (set -x && $MAKE -C docker/frim PREFIX="$PREFIX" install)
            $OPT_CLEAN && (set -x && $MAKE -C docker/frim clean)
        fi
    fi
else
    if (test_prog_installed FRIMDecode \
            || test_docker_image_installed test/frim \
        ) \
            && ask_yes_no "Uninstall FRIM docker?" \
        ; then
        (set -x && $MAKE -C docker/frim PREFIX="$PREFIX" uninstall)
        $OPT_CLEAN && (set -x && $MAKE -C docker/frim clean)
    fi
fi


if ! $OPT_INSTALL ; then
    _has_docker_wine=
    need_docker_wine || true
fi


print_h2 "MakeMKV"
echo "MakeMKV is a format converter, otherwise called \"transcoder\" that can"
echo "extract video/audio tracks from DVD and Blu-ray discs you own."
echo "qualIP's Media Tools uses the console version of MakeMKV, makemkvcon."
echo
echo "NOTE: You must have a paid license key or a valid Linux Beta key:"
echo "      https://www.makemkv.com/forum/viewtopic.php?t=1053"
echo
echo "See https://www.makemkv.com/"
echo

if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_prog_installed makemkvcon ; then
        if ask_yes_no "Build and install MakeMKV?" ; then
            (set -x && PREFIX="$PREFIX" installs/install-makemkv latest)
        fi
    fi
else
    if test_prog_installed makemkvcon \
            && ask_yes_no "Uninstall MakeMKV?" \
        ; then
        (set -x && PREFIX="$PREFIX" installs/uninstall-makemkv)
    fi
fi


print_h2 "qualIP's Media Tools"

if $OPT_INSTALL ; then
    if ask_yes_no "Install qualIP's Media Tools?" ; then
        if $OPT_DEVELOP ; then
            (set -x && $MAKE -C src develop)
        elif $OPT_USER ; then
            (set -x && $MAKE -C src install-user)
        else
            (set -x && $MAKE -C src install-system)
        fi
    fi
else
    if ask_yes_no "Uninstall qualIP's Media Tools?" ; then
        if $OPT_USER ; then
            (set -x && $MAKE -C src uninstall-user)
        else
            (set -x && $MAKE -C src uninstall-system)
        fi
    fi
fi


echo
echo "All done. Enjoy!"
echo
