#!/usr/bin/env bash

set -euo pipefail

cd "$(dirname "$0")"
qip_top_dir="$(pwd)"

usage() {
    echo "Usage: $0 [options...]"
    echo "Options:"
    echo "  -h, --help          Print this help and exit"
    echo "  -y, --yes           Answer yes to all prompts (unattended)"
    echo
    echo "  -i, --install       Install (default)"
    echo "  -r, --reinstall     Reinstall even if already installed"
    echo "  -u, --uninstall     Uninstall instead of installing"
    echo
    echo "  -U, --user          Select user installation target (~/.local)"
    echo "  -S, --system        Select system installation target (/usr/local)"
    echo "  -D, --develop       Select development installation target (~/.local)"
    echo "  --prefix PREFIX     Specify custom installation prefix (or PREFIX environment variable)"
    echo
    echo "  -c, --clean         Clean build artifacts after installing/uninstalling (use less space)"
    echo "  --no-clean          Do not clean build artifacts (faster re-builds) (default)"
}

if ! [[ -e "shfuncs/VERSION" ]] || [[ "$(<"shfuncs/VERSION")" -lt 1 ]] ; then
    echo "Updating shfuncs..."
    git submodule update --init --recursive shfuncs
fi
. shfuncs/func-print.sh
. shfuncs/func-cmd.sh

OPT_HELP=false
OPT_YES=false
OPT_USER=false
OPT_DEVELOP=false
OPT_INSTALL=true
OPT_REINSTALL=false
OPT_CLEAN=false
MAKE=${MAKE:-make -j}
PREFIX=${PREFIX:-/usr/local}
PYTHON=python3
PIP=pip3

export TMPDIR=${TMPDIR:-/tmp}
MY_TMPDIR="$TMPDIR/qip-media-tools-setup.$$.tmp"
cleanup() {
    [[ -n "$MY_TMPDIR" ]] && rm -Rf "$MY_TMPDIR/"
}
trap "cleanup ; exit 1" 1 2 9 14
trap "cleanup" 0
mkdir -p "$MY_TMPDIR"

OPTS_SHORT="h" ; OPTS_LONG="help"
OPTS_SHORT="${OPTS_SHORT}y" ; OPTS_LONG="${OPTS_LONG},yes"
OPTS_SHORT="${OPTS_SHORT}S" ; OPTS_LONG="${OPTS_LONG},system"
OPTS_SHORT="${OPTS_SHORT}U" ; OPTS_LONG="${OPTS_LONG},user"
OPTS_SHORT="${OPTS_SHORT}D" ; OPTS_LONG="${OPTS_LONG},develop"
OPTS_SHORT="${OPTS_SHORT}"  ; OPTS_LONG="${OPTS_LONG},prefix:"  # or $PREFIX
OPTS_SHORT="${OPTS_SHORT}i" ; OPTS_LONG="${OPTS_LONG},install"
OPTS_SHORT="${OPTS_SHORT}u" ; OPTS_LONG="${OPTS_LONG},uninstall"
OPTS_SHORT="${OPTS_SHORT}r" ; OPTS_LONG="${OPTS_LONG},reinstall"
OPTS_SHORT="${OPTS_SHORT}c" ; OPTS_LONG="${OPTS_LONG},clean,no-clean"
rc=0 ; getopt -T > /dev/null 2>&1 || rc=$?
if [[ "$rc" = 4 ]] ; then
    # GNU getopt
    TEMP=`POSIXLY_CORRECT=1 getopt --long $OPTS_LONG --options $OPTS_SHORT --name "$0" -- --system "$@"`
else
    # BSD getopt
    TEMP=`POSIXLY_CORRECT=1 getopt $OPTS_SHORT -S "$@"`
fi
eval set -- "$TEMP"

while true ; do
    case "$1" in

        -h|--help) OPT_HELP=true ; shift ;;
        -y|--yes)  OPT_YES=true  ; shift ;;

        -i|--install)   OPT_INSTALL=true                      ; shift ;;
        -u|--uninstall) OPT_INSTALL=false                     ; shift ;;
        -r|--reinstall) OPT_INSTALL=true  OPT_REINSTALL=true  ; shift ;;

        -S|--system)  PREFIX=/usr/local ; OPT_USER=false ; shift 1 ;;
        -U|--user)    PREFIX=~/.local   ; OPT_USER=true  ; shift 1 ;;
        -D|--develop) PREFIX=~/.local   ; OPT_USER=true ; OPT_DEVELOP=true ; shift 1 ;;
        --prefix)     PREFIX=$2                          ; shift 2 ;;

        -c|--clean) OPT_CLEAN=true  ; shift ;;
        --no-clean) OPT_CLEAN=false ; shift ;;

        --) shift ; break ;;
        *) print_err "Internal error!" ; exit 1 ;;

    esac
done
if [[ "$#" != 0 ]] ; then
    print_err "Extraneous arguments: $*"
    exit 1
fi

if $OPT_HELP ; then
    usage
    exit 0
fi

if [[ -z "$PREFIX" ]] ; then
    print_err "Please specify installation target (e.g.: --user, --system)"
    exit 1
fi

lsb_codename=
if [[ -z "$lsb_codename" ]] && type -P lsb_release > /dev/null ; then
    lsb_codename=$(lsb_release -cs 2>/dev/null)
fi
if [[ -z "$lsb_codename" ]] && [[ -f /etc/os-release ]] ; then
    lsb_codename=$(sed -n -e 's/^BUILD_ID=//p' /etc/os-release)
fi
lsb_codename=${lsb_codename:-unknown}
UNAME_S=$(uname -s || true)

test_prog_installed() {
    local prog=$1 ; shift
    local v

    print_q "$prog installed?"
    v=$(which "$prog" 2> /dev/null || true)
    if [[ -n "$v" ]] ; then
        print_a YES "$v"
    else
        print_a NO
        print_err "Error: $prog not found!"
        return 1
    fi
}

if [[ -e /etc/debian_version ]] ; then
    PMS=apt-get
    DISTRO=debian

    test_package_installed() {
        local package=$1 ; shift
        local v

        print_q "$package package installed?"
        v=$(dpkg -s "$package" 2> /dev/null | sed -n -e 's/^Version: //p' | head -n1 || true)
        if [[ -n "$v" ]] ; then
            print_a YES "$v"
        else
            print_a NO
            print_err "Error: $package package not found!"
            return 1
        fi
    }

    install_package() {
        local package=$1 ; shift
        local ask=true
        local v=
        while [[ "$#" != 0 ]] ; do
            case "$1" in
                -y) ask=false ;;
                *) print_err "Invalid argument: $1" ; exit 1 ;;
            esac
        done

        set -- apt-get install $($OPT_YES && echo -y) $package
        [[ "$USER" = "root" ]] || set -- $maybe_sudo "$@"

        if ! $ask || ask_yes_no "Install $package package ($*)?" ; then
            log_cmd_live_pty "$@"
        else
            return 1
        fi
    }

elif [[ -e /etc/arch-release ]] ; then
    PMS=pacman
    DISTRO=arch

    test_package_installed() {
        local package=$1 ; shift
        local v

        print_q "$package package installed"
        if v=$(pacman -Q "$package" 2> /dev/null) && [[ -n "$v" ]] ; then
            print_a YES "$v"
        else
            print_a NO
            print_err "Error: $package package not found!"
            return 1
        fi
    }

    install_package() {
        local package=$1 ; shift
        local ask=true
        local v=
        while [[ "$#" != 0 ]] ; do
            case "$1" in
                -y) ask=false ;;
                *) print_err "Invalid argument: $1" ; exit 1 ;;
            esac
        done

        set -- pacman $($OPT_YES && echo --noconfirm) -S $package
        [[ "$USER" = "root" ]] || set -- $maybe_sudo "$@"

        if ! $ask || ask_yes_no "Install $package package ($*)?" ; then
            log_cmd_live_pty "$@"
        else
            return 1
        fi
    }

    install_aur_package() {
        local package=$1 ; shift
        local package_file=
        local ask=true
        local v=
        while [[ "$#" != 0 ]] ; do
            case "$1" in
                -y) ask=false ;;
                *) print_err "Invalid argument: $1" ; exit 1 ;;
            esac
        done

        if ! $ask || ask_yes_no "Build & install $package package from AUR?" ; then

            log_cmd_live_pty git clone "https://aur.archlinux.org/$package.git" "$MY_TMPDIR/$package"
            log_cmd_interactive cd "$MY_TMPDIR/$package"
            log_cmd_live_pty makepkg
            log_cmd_interactive cd "$qip_top_dir"
            package_file=$(find "%MY_TMPDIR/$package" -name "$package-*.pkg.tar.zst")
            if [[ -z "$package_file" ]] ; then
                print_err "Failed to build package $package"
                return 1
            fi

            set -- pacman $($OPT_YES && echo --noconfirm) -U "$package_file"
            [[ "$USER" = "root" ]] || set -- $maybe_sudo "$@"
            log_cmd_live_pty "$@"
        else
            return 1
        fi
    }

elif [[ "$UNAME_S" = 'Darwin' ]] ; then
    PMS=brew
    DISTRO=darwin

    PATH="${PATH}:/Applications/MakeMKV.app/Contents/MacOS"

    # qip-media-tools is not signed by Apple, you might need to adjust gatekeeper options in order to install the program:
    #     https://support.apple.com/en-us/HT202491

    test_package_installed_pkgutil() {
        local package=$1 ; shift
        local v

        print_q "$package package installed?"
        if v=$(pkgutil --pkgs="$package" 2> /dev/null) && [[ -n "$v" ]] ; then
            print_a YES "$v"
        else
            print_a NO
            print_err "Error: $package package not found!"
            return 1
        fi
    }

    test_package_installed_brew() {
        local package=$1 ; shift
        local v

        print_q "$package package installed?"
        if v=$(brew list --versions "$package" 2> /dev/null) && [[ -n "$v" ]] ; then
            print_a YES "$v"
        else
            print_a NO
            print_err "Error: $package package not found!"
            return 1
        fi
    }

    test_package_installed() {
        test_package_installed_brew "$@"
    }

    install_package_brew() {
        local package=$1 ; shift
        local ask=true
        local v=
        while [[ "$#" != 0 ]] ; do
            case "$1" in
                -y) ask=false ;;
                *) print_err "Invalid argument: $1" ; exit 1 ;;
            esac
        done

        set -- brew install $package
        if ! $OPT_USER ; then
            [[ "$USER" = "root" ]] || set -- $maybe_sudo "$@"
        fi

        if ! $ask || ask_yes_no "Install $package package ($*)?" ; then
            log_cmd_live_pty "$@"
        else
            return 1
        fi
    }

    install_package() {
        install_package_brew "$@"
    }

else
    print_err "ERROR: Unknown package management system."
    print_err "Sorry, your system is not supported at this time."
    exit 1
fi

# osInfo[/etc/redhat-release]=yum
# osInfo[/etc/arch-release]=pacman
# osInfo[/etc/gentoo-release]=emerge
# osInfo[/etc/SuSE-release]=zypp
# osInfo[/etc/debian_version]=apt-get

test_docker_image_installed() {
    local image=$1 ; shift
    local v=

    print_q "Docker $image image installed?"
    v=$(docker image ls -q "$image")
    if [[ -n "$v" ]] ; then
        print_a YES
    else
        print_a NO
        print_err "Error: docker $image not found!"
        return 1
    fi
}

test_python_module_installed() {
    local module=$1 ; shift
    local v=

    print_q "Python module $module installed?"
    # v=$($PYTHON -c "import importlib ; print(importlib.util.find_spec('${module}') is not None)" 2> /dev/null)
    v=$($PYTHON -c "import ${module} ; print(True)" 2> /dev/null)
    if [[ "$v" = "True" ]] ; then
        print_a "YES"
    else
        print_a NO
        print_err "Error: Python module $module not found!"
        return 1
    fi
}

_has_docker=
need_docker() {
    if [[ -z "$_has_docker" ]] ; then
        if test_prog_installed docker ; then
            _has_docker=true
        else
            _has_docker=false
            print_h2 "Docker"
            print "Docker is a container framework that reduces complexity of porting"
            print "applications. Several 3rd-party applications used by qualIP's Media Tools"
            print "are made available in dockers."
            print
            print "See https://www.docker.com"
            print

            case "$DISTRO-$lsb_codename" in
                *-bullseye|*-buster)
                    print "Following Docker install instructions for Debian $lsb_codename:"
                    print "    https://docs.docker.com/engine/install/debian/"
                    print
                    $maybe_sudo apt-get install $($OPT_YES && echo -y) apt-transport-https ca-certificates curl gnupg lsb-release
                    curl -fsSL https://download.docker.com/linux/debian/gpg \
                        | $maybe_sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" \
                        | $maybe_sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                    $maybe_sudo apt-get update
                    ;;

                *-hirsute|*-groovy|*-focal|*-bionic|*-xental)
                    print "Following Docker install instructions for Ubuntu $lsb_codename:"
                    print "    https://docs.docker.com/engine/install/ubuntu/"
                    print
                    $maybe_sudo apt-get install $($OPT_YES && echo -y) apt-transport-https ca-certificates curl gnupg lsb-release
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
                        | $maybe_sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
                        | $maybe_sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                    $maybe_sudo apt-get update
                    ;;

                arch-*)
                    # Rolling release; Expect latest.
                    print "Following Docker install instructions for Arch $lsb_codename:"
                    print "    https://wiki.archlinux.org/title/docker"
                    print
                    $maybe_sudo pacman $($OPT_YES && echo --noconfirm) -S docker
                    ;;

                darwin-*)
                    print "Please follow the Docker Desktop installation instructions for Mac OS X:"
                    print "    https://docs.docker.com/docker-for-mac/install/"
                    print
                    print "Don't forget to run the application once to complete the installation."
                    print "Please fix the issue and run $0 again."
                    exit 1
                    ;;

                *)
                    print "No special instructions known for $DISTRO release codename '$lsb_codename'"
                    print
                    ;;
            esac

            case "$DISTRO" in
                debian|ubuntu)
                    package_name=docker-ce
                    ;;
                *)
                    package_name=docker
                    ;;
            esac
            install_package $package_name

            if test_prog_installed docker ; then
                _has_docker=true
            else
                print_err "docker (installed by $package_name package) is not found!"
                exit 1
            fi
        fi
        if $_has_docker ; then
            if ! log_cmd docker info ; then
                print
                print_err "You don't seem to be able to run docker commands."
                print "Try:"
                print
                print "    docker info"
                if type -P systemctl > /dev/null ; then
                    print
                    # no tty to avoid more prompt
                    log_cmd systemctl status docker || true
                    print
                    print "If the docker service is not active, you may need to enable and start it:"
                    print
                    print "    sudo systemctl enable docker"
                    print "    sudo systemctl start docker"
                fi
                if groups | grep -qw docker ; then
                    : #print ; print "You are part of the docker group."
                else
                    print
                    print_err "You are not part of the docker group."
                    print "You probably need to run the following command to be added to the"
                    print "group:"
                    print
                    print "    sudo gpasswd -a $USER docker"
                    print
                    print "Once done, please start a new login session (or reboot) for the change to"
                    print "be effective."
                    print
                fi
                print_err "Please fix the issue and run $0 again."
                exit 1
            fi
        fi
    fi
    $_has_docker
}

_has_docker_wine=
need_docker_wine() {
    if [[ -z "$_has_docker_wine" ]] ; then
        if $OPT_INSTALL ; then
            if test_docker_image_installed qualIP/wine64 \
                    && test_docker_image_installed qualIP/wine32 \
                ; then
                _has_docker_wine=true
            else
                _has_docker_wine=false
            fi
        else
            if test_docker_image_installed qualIP/wine64 \
                    || test_docker_image_installed qualIP/wine32 \
                ; then
                _has_docker_wine=true
            else
                _has_docker_wine=false
            fi
        fi
        if $OPT_INSTALL ; then
            if $OPT_REINSTALL || ! $_has_docker_wine ; then
                print_h2 "Wine"
                print "Wine is a Windows compatibility layer for Linux which allows running some"
                print "3rd-party Windows applications used by qualIP's Media Tools."
                print "Dockers for wine32 and wine64 are used as standard base for these"
                print "3rd-party Windows applications."
                print
                print "See https://www.docker.com"
                print
                if ask_yes_no "Build and install wine dockers?" \
                        && need_docker \
                    ; then
                    log_cmd_live_pty $MAKE -C docker/wine
                    log_cmd_live_pty $MAKE -C docker/wine tag-latest
                    $OPT_CLEAN && log_cmd_live_pty $MAKE -C docker/wine clean
                    _has_docker_wine=true
                fi
            fi
        else
            if $_has_docker_wine \
                    && ask_yes_no "Uninstall wine dockers?" \
                ; then
                log_cmd_live_pty $MAKE -C docker/wine PREFIX="$PREFIX" uninstall
                $OPT_CLEAN && log_cmd_live_pty $MAKE -C docker/wine clean
                _has_docker_wine=false
            fi
        fi
    fi
    $_has_docker_wine
}

ask_yes_no() {
    local q=$1 ; shift
    local v=

    while true ; do
        print_q "$q" "Y/n"
        if $OPT_YES ; then
            v=yes
            print_a "$v"
        else
            read v
        fi
        _last_print_is_nl=false
        case "x$v" in
            x|xY|xy|xyes) v=true ; break ;;
            xN|xn|xno) v=false ; break ;;
            *) print_err "Invalid input! Please try again" ;;
        esac
    done
    $v
}

#print_h2 "Prologue"
print
print "This program will help you install qualIP's Media Tools and its"
print "dependencies."
print "Sudo access will be required to install certain tools."

print_h2 "System Information"
print_value "Installation mode" "$( \
    $OPT_REINSTALL && echo "Reinstall" || \
    ($OPT_INSTALL && echo "Install" || \
     echo "Uninstall"))"
print_value "Installation target" "$( \
    $OPT_DEVELOP && echo "Development" || \
    ($OPT_USER && echo "User" || \
     echo "System"))"
print_value "Installation prefix" "$PREFIX"
print_value "Prompt mode" "$($OPT_YES && echo "Answer yes" || echo "Prompt")"
print_value "Clean mode" "$($OPT_CLEAN && echo "Clean" || echo "No clean")"
print_value "Packaging" "$PMS"
print_value "Distro" "$DISTRO"
print_value "LSB release codename" "$lsb_codename"

print
print "Run "'`'"$0 --help"'`'" for more options."

print
ask_yes_no "Ready to proceed?"


if ! [[ -d "$PREFIX" ]] ; then
    mkdir "$PREFIX"
fi

maybe_sudo=$([[ "$USER" = "root" ]] || echo sudo)
PREFIX_SUDO=$([[ -w "$PREFIX" ]] || echo sudo)


print_h2 "Package dependencies"
print "qualIP's Media Tools require several 3rd-party application packages"
print "available in most Linux distributions."
print "A small dependency-only package, \"qip-media-tools-depends\" is used to"
print "make sure all required applications are installed."
print
if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_package_installed qip-media-tools-depends ; then
        if ask_yes_no "Install qip-media-tools-depends package?" ; then

            if [[ "$PMS" = "pacman" ]] && [[ "$DISTRO" = "arch" ]] ; then
                if $OPT_REINSTALL || ! test_package_installed libudfread-git ; then
                    install_aur_package libudfread-git
                fi
            fi

            log_cmd_live_pty $MAKE -C src install-qip-media-tools-depends

        fi
        if ! test_package_installed qip-media-tools-depends ; then
            print
            print_err "The qip-media-tools-depends package failed to install."
            case "$DISTRO-$lsb_codename" in
                *-buster)
                    print
                    print "Debian buster may require extra preparations."
                    print
                    print "Extra contrib and non-free package sources:"
                    print
                    print "    sudo sed -i -e 's/ main *$/ main contrib non-free/' /etc/apt/sources.list"
                    print "    sudo apt-get update"
                    print
                    print "libudfread-dev is not available in Debian $lsb_codename, add backports:"
                    print
                    print "    echo deb http://deb.debian.org/debian/ buster-backports main contrib non-free | sudo tee /etc/apt/sources.list.d/buster-backports.list"
                    print "    sudo apt-get update"
                    print
                    print_err "Please fix the issue and run $0 again."
                    exit 1
                    ;;

                *-focal)
                    print
                    print "Ubuntu $lsb_codename may require extra preparations."
                    print
                    print "libudfread-dev is not available in Ubuntu $lsb_codename, get it from groovy:"
                    print
                    print "    wget http://mirrors.kernel.org/ubuntu/pool/universe/libu/libudfread/libudfread-dev_1.1.0-1_amd64.deb"
                    print "    wget http://mirrors.kernel.org/ubuntu/pool/universe/libu/libudfread/libudfread0_1.1.0-1_amd64.deb"
                    print "    sudo dpkg -i libudfread-dev_1.1.0-1_amd64.deb libudfread0_1.1.0-1_amd64.deb"
                    print
                    print_err "Please fix the issue and run $0 again."
                    exit 1
                    ;;

                *)
                    print
                    print_err "Sorry, there are no special instructions at this time for $DISTRO"
                    print_err "release codename '$lsb_codename'"
                    print
                    exit 1
                    ;;
            esac
        fi
    fi
else
    if test_package_installed qip-media-tools-depends \
            && ask_yes_no "Uninstall qip-media-tools-depends package?" \
        ; then
        log_cmd_live_pty $MAKE -C src uninstall-qip-media-tools-depends
    fi
fi


print_h2 "PyAV (qualIP fork)"
print "PyAV is a Pythonic binding for the FFmpeg libraries."
print "The qualIP/PyAV fork has many enhancements required."
print
#print "See https://github.com/PyAV-Org/PyAV"
print "See https://github.com/qualIP/PyAV"
print

src_pyav_dir="$qip_top_dir/src/qip/PyAV"
if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_python_module_installed av ; then
        if ask_yes_no "Build and install Python module av (qualIP/PyAV)?" \
            ; then
            if ! [[ -d "$src_pyav_dir" ]] ; then
                log_cmd_live_pty git clone "https://github.com/qualIP/PyAV.git" "$src_pyav_dir"
            fi
            log_cmd_interactive cd "$src_pyav_dir"
            log_cmd_live_pty $PYTHON setup.py build
            if $OPT_DEVELOP ; then
                log_cmd_live_pty $PYTHON setup.py develop --user
            elif $OPT_USER ; then
                log_cmd_live_pty $PIP install . --user
            else
                log_cmd_live_pty $PREFIX_SUDO $PIP install .
            fi
            log_cmd_interactive cd "$qip_top_dir"
            test_python_module_installed av
        fi
    fi
else
    if test_python_module_installed av \
            && ask_yes_no "Uninstall Python module av (qualIP/PyAV)?" \
        ; then
        if $OPT_USER ; then
            log_cmd_live_pty $PIP uninstall "av"
        else
            log_cmd_live_pty $PREFIX_SUDO $PIP uninstall "av"
        fi
        $OPT_CLEAN && log_cmd_live_pty $MAKE -C "$src_pyav_dir" clean
    fi
fi

print_h2 "qaac"
print "qaac is a CLI QuickTime AAC/ALAC encoder."
print "It is required to encode audio files (music, audiobooks) in .m4a format"
print "using Apple/iTunes's own AAC encoder resulting in widely compatible"
print "high-quality compressed audio files."
print
print "See https://github.com/nu774/qaac"
print

if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_prog_installed qaac ; then
        if ask_yes_no "Build and install qaac docker?" \
                && need_docker \
                && need_docker_wine \
            ; then
            log_cmd_live_pty $MAKE -C docker/qaac
            log_cmd_live_pty $MAKE -C docker/qaac tag-latest
            log_cmd_live_pty $MAKE -C docker/qaac PREFIX="$PREFIX" install
            $OPT_CLEAN && log_cmd_live_pty $MAKE -C docker/qaac clean
        fi
    fi
else
    t() {
        test_prog_installed qaac || \
        test_docker_image_installed qualIP/qaac
    }
    if t && ask_yes_no "Uninstall qaac docker?" \
        ; then
        log_cmd_live_pty $MAKE -C docker/qaac PREFIX="$PREFIX" uninstall
        $OPT_CLEAN && log_cmd_live_pty $MAKE -C docker/qaac clean
    fi
fi


print_h2 "SubtitleEdit"
print "Subtitle Edit is an editor for video subtitles"
print "It is required to view subtitles and convert them between different"
print "formats, including using character recognition (OCR) to convert video"
print "subtitles, often found in DVD and Blu-ray movies, into text subtitles."
print
print "See https://nikse.dk/SubtitleEdit/"
print

if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_prog_installed SubtitleEdit ; then
        if ask_yes_no "Build and install SubtitleEdit docker?" \
                && need_docker \
                && need_docker_wine \
            ; then
            log_cmd_live_pty $MAKE -C docker/SubtitleEdit
            log_cmd_live_pty $MAKE -C docker/SubtitleEdit tag-latest
            log_cmd_live_pty $MAKE -C docker/SubtitleEdit PREFIX="$PREFIX" install
            $OPT_CLEAN && log_cmd_live_pty $MAKE -C docker/SubtitleEdit clean
        fi
    fi
else
    t() {
        test_prog_installed SubtitleEdit || \
        test_docker_image_installed qualIP/subtitleedit
    }
    if t && ask_yes_no "Uninstall SubtitleEdit docker?" \
        ; then
        log_cmd_live_pty $MAKE -C docker/SubtitleEdit PREFIX="$PREFIX" uninstall
        $OPT_CLEAN && log_cmd_live_pty $MAKE -C docker/SubtitleEdit clean
    fi
fi


print_h2 "FRIMDecode"
print "FRIMDecode is a 3D-MVC Decoder."
print "It is required to decode 3D movies that are encoded in Multiview Video"
print "Coding format. For example, 3D Blu-ray movies."
print
print "See https://www.videohelp.com/software/FRIM"
print

if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_prog_installed FRIMDecode ; then
        if ask_yes_no "Build and install FRIM docker?" \
                && need_docker \
                && need_docker_wine \
            ; then
            log_cmd_live_pty $MAKE -C docker/frim
            log_cmd_live_pty $MAKE -C docker/frim tag-latest
            log_cmd_live_pty $MAKE -C docker/frim PREFIX="$PREFIX" install
            $OPT_CLEAN && log_cmd_live_pty $MAKE -C docker/frim clean
        fi
    fi
else
    t() {
        test_prog_installed FRIMDecode || \
        test_docker_image_installed qualIP/frim
    }
    if t && ask_yes_no "Uninstall FRIM docker?" \
        ; then
        log_cmd_live_pty $MAKE -C docker/frim PREFIX="$PREFIX" uninstall
        $OPT_CLEAN && log_cmd_live_pty $MAKE -C docker/frim clean
    fi
fi


if ! $OPT_INSTALL ; then
    _has_docker_wine=
    need_docker_wine || true
fi


print_h2 "MakeMKV"
print "MakeMKV is a format converter, otherwise called \"transcoder\" that can"
print "extract video/audio tracks from DVD and Blu-ray discs you own."
print "qualIP's Media Tools uses the console version of MakeMKV, makemkvcon."
print
print "NOTE: You must have a paid license key or a valid Linux Beta key:"
print "      https://www.makemkv.com/forum/viewtopic.php?t=1053"
print
print "See https://www.makemkv.com/"
print

if $OPT_INSTALL ; then
    if $OPT_REINSTALL || ! test_prog_installed makemkvcon ; then
        if ask_yes_no "Build and install MakeMKV?" ; then
            log_cmd_live_pty PREFIX="$PREFIX" installs/install-makemkv latest
        fi
    fi
else
    if test_prog_installed makemkvcon \
            && ask_yes_no "Uninstall MakeMKV?" \
        ; then
        log_cmd_live_pty PREFIX="$PREFIX" installs/uninstall-makemkv
    fi
fi


print_h2 "qualIP's Media Tools"

if $OPT_INSTALL ; then
    if ask_yes_no "Install qualIP's Media Tools?" ; then
        if $OPT_DEVELOP ; then
            log_cmd_live_pty $MAKE -C src develop
        elif $OPT_USER ; then
            log_cmd_live_pty $MAKE -C src install-user
        else
            log_cmd_live_pty $MAKE -C src install-system
        fi
    fi
else
    if ask_yes_no "Uninstall qualIP's Media Tools?" ; then
        if $OPT_USER ; then
            log_cmd_live_pty $MAKE -C src uninstall-user
        else
            log_cmd_live_pty $MAKE -C src uninstall-system
        fi
    fi
fi


print
print_em "All done!"
print
